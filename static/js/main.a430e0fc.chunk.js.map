{"version":3,"sources":["App.js","customStyle.js","images/logo.png","images/pic.jfif","topBar.js","sideBar.js","CustomJsonGraph.js","index.js","../node_modules/typescript/lib sync"],"names":["Array","keys","map","i","id","filter","source","target","Math","round","random","styles","width","position","right","height","color","border","top","padding","borderRadius","maxWidth","flex","zIndex","fontSize","wordWrap","listStyleType","paddingLeft","cursor","transform","leftbar","background","textAlign","topbar","display","marginLeft","marginTop","indexs","left","rootDiv","topBar","style","mainDiv","workflowSelected","sideBar","props","toggleSidebar","event","key","currentTarget","parentNode","setState","state","console","log","rightOpen","workflow_type","type","name","node","Name","status","Status","neighbors","Workflow","Buyer","Seller","workflow_Implementation","WorkflowImplementation","this","data","hasOwnProperty","className","sidebar","layout","onClick","closeIcon","close","workflowList","RenderData","React","Component","CustomJsonGraph","fgRef","useRef","useState","setStatus","show_sidebar","showSidebar","setWorkflow_type","singleNodeData","setsingleNodeData","check","setCheck","Set","highlightNodes","setHighlightNodes","highlightLinks","setHighlightLinks","hoverNode","setHoverNode","linksGlobal","setLinksGlobal","nodesGlobal","setNodesGlobal","setFirstFilter","selected","setSelected","selected1","setSelected1","selected2","setSelected2","selected3","setSelected3","Links_State","links","nodes","useEffect","useMemo","w_new","push","obj","length","j","k","updateHighlight","handleClick","links_new","distRatio","hypot","x","current","cameraPosition","y","z","filter_graph","handleByStatus","node_status","filter_graph_by_status","useCallback","ctx","beginPath","arc","NODE_R","PI","fillStyle","fill","rowWrapper","heading","slctDiv","slct","value","onChange","e","parseInt","btn","middlebar","nodeColor","ref","graphData","linkOpacity","linkAutoColorBy","d","linkWidth","autoPauseRedraw","linkDirectionalParticles","linkDirectionalParticleWidth","link","has","nodeLabel","n","nodeCanvasObjectMode","undefined","onNodeHover","clear","add","forEach","neighbor","onLinkHover","nodeVal","linkDirectionalArrowLength","linkDirectionalParticleSpeed","linkDirectionalParticleColor","onNodeClick","rootElement","document","getElementById","ReactDOM","render","webpackEmptyContext","req","Error","code","resolve","module","exports"],"mappings":"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","file":"static/js/main.a430e0fc.chunk.js","sourcesContent":["import \"./styles.css\";\n\nimport ForceGraph3d from \"react-force-graph-3d\";\n\n\n// Random data\nconst N = 70;\nconst gData = {\n  nodes: [...Array(N).keys()].map((i) => ({ id:i })),\n  links: [...Array(N).keys()]\n    .filter((id) => id)\n    .map((id) => ({\n      source: id,\n      target: Math.round(Math.random() * (id - 1))\n    }))\n};\n\n\n\nexport default function App() {\n  return (\n\n    <ForceGraph3d\n    backgroundColor={\"rgba(0,0,0,1)\"}\n    nodeColor={() => \"yellow\"}\n    linkColor={() => \"white\"}\n    graphData={gData}\n  />\n  \n  \n    \n  );\n\n \n}\n","export const styles = {\r\n    \"sidebar\": {\r\n        width: \"20%\",\r\n        position: \"absolute\",\r\n        right: \"33px\",\r\n        height: \"auto\",\r\n        color: \"white\",\r\n        border: \"1px solid violet\",\r\n        top:\"25%\",\r\n        padding: \"18px\",\r\n        borderRadius:\"4px\",\r\n        maxWidth: \"20%\",\r\n        flex: \"0 0 20%\"\r\n        //  overflowY:\"scroll\"\r\n    },\r\n    \"layout\": {\r\n        height: \"100%\", \r\n        zIndex: \"1\", \r\n        fontSize: \"18px\",\r\n        wordWrap:\"break-word\",\r\n        \r\n    },\r\n    \"closeIcon\":{\r\n        fontSize: \"large\",\r\n        position: \"absolute\",\r\n        right: \"0\",\r\n        right: \"-10px\",\r\n        top: \"10px\"\r\n    },\r\n    \"workflowList\":{\r\n        listStyleType: \"none\",\r\n        paddingLeft: \"0px\"\r\n    },\r\n    \"close\":{\r\n        cursor: \"pointer\",\r\n        position: \"absolute\",\r\n        top: \"50%\",\r\n        right: \"0%\",\r\n        padding: \"12px 16px\",\r\n        transform: \"translate(0%, -50%)\"\r\n    }\r\n}\r\n\r\nexport const leftbar = {\r\n    \"btn\": {\r\n     background: \"transparent\",\r\n    color: \"white\",\r\n    border: \"1px solid violet\",\r\n    borderRadius: \"4px\",\r\n    padding: \"8px\",\r\n    width: \"100%\",\r\n    cursor: \"pointer\"\r\n    },\r\n    \r\n    \"slct\": {\r\n    //     background: \"transparent\",\r\n    // color: \"white\",\r\n    // border: \"1px solid white\",\r\n    // borderRadius: \"4px\",\r\n    // padding: \"8px\",\r\n    // width: \"100%!important\",\r\n        zIndex: \"1\",\r\n        height: \"40px\",\r\n    },\r\n    \"mainDiv\": {\r\n      //  marginTop: \"180px\",\r\n        textAlign:\"center\", \r\n        border: \"1px solid violet\" , \r\n        borderRadius: \"4px\",\r\n    },\r\n    \"heading\": {\r\n        color:\"white\"\r\n    },\r\n    \"slctDiv\": {\r\n        width:\"250px\", padding:\"20px\"\r\n    }\r\n}\r\n\r\nexport const topbar = {\r\n    \"mainDiv\": {\r\n        display:\"flex\", marginLeft:\"34%\",marginTop: \"30px\", padding: \"10px 0px\", position: \"absolute\",\r\n       color: \"white\",\r\n       zIndex: \"1\"\r\n    },\r\n    \"workflow\": {\r\n        padding:\"8px 20px\", border:\"1px solid violet\", marginLeft:\"10px\", color:\"black\", background:\"white\"\r\n    },\r\n    \"workflowSelected\": {\r\n        padding:\"8px 20px\", border:\"1px solid white\", marginLeft:\"10px\", color:\"black\", background:\"violet\",borderRadius:\"3px\"\r\n    }\r\n}\r\n\r\nexport const indexs = {\r\n    \"leftbar\": {\r\n        position: \"absolute\", zIndex: \"1\", left: \"30px\",top:\"25%\",top:\"25%\",\r\n        // maxWidth: \"20%\",\r\n        flex: \"0 0 20%\"\r\n    },\r\n    \"middlebar\": {\r\n        position: \"absolute\"\r\n    }\r\n}\r\n\r\nexport const rootDiv = {\r\n    \"rowWrapper\": {\r\n        display: \"flex\"\r\n    }\r\n}\r\n\r\n//export styles;","export default __webpack_public_path__ + \"static/media/logo.f35d21ad.png\";","export default __webpack_public_path__ + \"static/media/pic.95e7e533.jfif\";","import \"./styles.css\";\r\nimport {topbar} from \"./customStyle\";\r\nexport default function topBar() {\r\n    return(\r\n       <div style={topbar.mainDiv}>\r\n           <div style={topbar.workflowSelected}>Workflow View</div>\r\n           <div style={{padding:\"8px 20px\", border:\"1px solid violet\", marginLeft:\"10px\",borderRadius:\"3px\"}}>Partner Type View</div>\r\n           <div style={{padding:\"8px 20px\", border:\"1px solid violet\", marginLeft:\"10px\",borderRadius:\"3px\"}}>Supply Chain View</div>\r\n       </div>\r\n    )\r\n}","import React from \"react\";\r\nimport \"./styles.css\";\r\nimport { styles } from \"./customStyle\";\r\n//import \"./sideBar.scss\";\r\n\r\nclass sideBar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    console.log(\"node data\", props);\r\n    this.state = {\r\n      rightOpen: true,\r\n      workflow_type: props.type,\r\n      name: props.node.Name,\r\n      status: props.node.Status,\r\n      neighbors: props.node.neighbors,\r\n      type: props.node.Workflow,\r\n      Buyer: props.node.Buyer,\r\n      Seller: props.node.Seller,\r\n      workflow_Implementation: props.node.WorkflowImplementation,\r\n    };\r\n  }\r\n  // componentDidMount(){\r\n  //     console.log(this.state.seller);\r\n  //     this.state.seller && this.state.seller.map((data) =>\r\n  //         data.hasOwnProperty(\"Seller\") && console.log(data.Seller)\r\n  //     )\r\n  // }\r\n  toggleSidebar = (event) => {\r\n    let key = `${event.currentTarget.parentNode.id}Open`;\r\n    this.setState({ [key]: !this.state[key] });\r\n  };\r\n\r\n  RenderData() {\r\n    if (this.state.workflow_type === \"workflow\") {\r\n      return (\r\n        <div>\r\n          <li>\r\n            {\" \"}\r\n            <b>Name</b> -{this.state.name}\r\n          </li>\r\n          <li>\r\n            {\" \"}\r\n            <b>Type</b> - {this.state.type}{\" \"}\r\n          </li>\r\n          <li>\r\n            {\" \"}\r\n            <b>Status</b> - {this.state.status}{\" \"}\r\n          </li>\r\n          <li>\r\n            {\" \"}\r\n            <b>Seller Partner(s)</b>{\" \"}\r\n            {this.state.neighbors &&\r\n              this.state.neighbors.map(\r\n                (data) => data.hasOwnProperty(\"Seller\") && data.Seller\r\n              )}\r\n          </li>\r\n          <li>\r\n            {\" \"}\r\n            <b>Buyer Partner(s)</b>{\" \"}\r\n            {this.state.neighbors &&\r\n              this.state.neighbors.map(\r\n                (data) => data.hasOwnProperty(\"Buyer\") && data.Buyer\r\n              )}{\" \"}\r\n          </li>\r\n        </div>\r\n      );\r\n    }\r\n    if (this.state.workflow_type === \"InsuranceGig\") {\r\n      return (\r\n        <div>\r\n          <li> Name -InsuranceGig </li>\r\n          Workflows -\r\n          {this.state.neighbors &&\r\n            this.state.neighbors.map((data) => <li>{data.Name}</li>)}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    if (this.state.workflow_type === \"buyer_seller\") {\r\n    }\r\n    return (\r\n      <div>\r\n        <li>\r\n          {\" \"}\r\n          <b>Name</b> -{this.state.Buyer ? this.state.Buyer : this.state.Seller}{\" \"}\r\n        </li>\r\n        <li>\r\n          {\" \"}\r\n          <b>Workflows that they are a part of-</b>{\" \"}\r\n          {this.state.workflow_Implementation &&\r\n            this.state.workflow_Implementation.map((data) => (\r\n              <li>{data.Name} </li>\r\n            ))}\r\n        </li>\r\n        <li>\r\n          {\" \"}\r\n          <b>Line Of Business</b> - None{\" \"}\r\n        </li>\r\n        <li>\r\n          {\" \"}\r\n          <b>Insurance Value Chain</b> - None{\" \"}\r\n        </li>\r\n        <li>\r\n          {\" \"}\r\n          <b>Insurance Business Type</b> - None\r\n        </li>\r\n        <li>\r\n          {\" \"}\r\n          <b>Technology</b> - None\r\n        </li>\r\n\r\n        <li>\r\n          <b>Partners that they integrate with</b>- None\r\n        </li>\r\n      </div>\r\n    );\r\n  }\r\n  render() {\r\n    let rightOpen = this.state.rightOpen ? \"true\" : \"false\";\r\n\r\n    return (\r\n      <>\r\n        {rightOpen ? (\r\n          <div className={`sidebaar ${rightOpen}`} style={styles.sidebar}>\r\n            <div id=\"layout\" style={styles.layout}>\r\n              <div id=\"right\" className={rightOpen}>\r\n                <div\r\n                  className=\"icon\"\r\n                  onClick={this.toggleSidebar}\r\n                  style={styles.closeIcon}\r\n                >\r\n                  <span style={styles.close}>&#10006;</span>\r\n                </div>\r\n                <div>\r\n                  <div className=\"content\">\r\n                    <ul style={styles.workflowList}>\r\n                      <>{this.RenderData()}</>\r\n                    </ul>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default sideBar;\r\n","import \"./styles.css\";\r\nimport w_new from \"./WorkflowNew_1.json\";\r\nimport ForceGraph3D from \"react-force-graph-3d\";\r\nimport { Bezier } from \"bezier-js\";\r\nimport ForceGraph2D from \"react-force-graph-2d\";\r\nimport SpriteText from \"three-spritetext\";\r\nimport generateName from \"./random.js\";\r\nimport * as d3 from \"d3\";\r\nimport logo from \"./images/logo.png\";\r\nimport background_image from \"./images/pic.jfif\";\r\nimport { indexs } from \"./customStyle\";\r\nimport LeftBar from \"./leftBar\";\r\nimport TopBar from \"./topBar\";\r\nimport SideBar from \"./sideBar\";\r\nimport { leftbar } from \"./customStyle\";\r\nimport { rootDiv } from \"./customStyle\";\r\nimport {\r\n  CSS2DRenderer,\r\n  CSS2DObject,\r\n} from \"three/examples/jsm/renderers/CSS2DRenderer.js\";\r\nimport { useEffect, useState, useRef, useCallback, useMemo } from \"react\";\r\nimport { resolveModuleName } from \"typescript\";\r\nimport { filter } from \"d3\";\r\n\r\nfunction genRandomTree(N = 300, reverse = false) {\r\n  return {\r\n    nodes: [...Array(N).keys()].map((i) => ({ id: i })),\r\n    links: [...Array(N).keys()]\r\n      .filter((id) => id)\r\n      .map((id) => ({\r\n        [reverse ? \"target\" : \"source\"]: id,\r\n        [reverse ? \"source\" : \"target\"]: Math.round(Math.random() * (id - 1)),\r\n      })),\r\n  };\r\n}\r\n\r\nconst NODE_R = 5;\r\n\r\nexport default function CustomJsonGraph() {\r\n  const fgRef = useRef(null);\r\n\r\n  const [status, setStatus] = useState(false);\r\n  const [show_sidebar, showSidebar] = useState(false); //sidebar state\r\n  const [workflow_type, setWorkflow_type] = useState(\"\"); //type of state\r\n  const [singleNodeData, setsingleNodeData] = useState(null); //single node data for sidebar component\r\n\r\n  const [check, setCheck] = useState(false);\r\n  const [highlightNodes, setHighlightNodes] = useState(new Set());\r\n  const [highlightLinks, setHighlightLinks] = useState(new Set());\r\n  const [hoverNode, setHoverNode] = useState(null);\r\n  const [linksGlobal, setLinksGlobal] = useState(null);\r\n  const [nodesGlobal, setNodesGlobal] = useState(null);\r\n  const [first_filter, setFirstFilter] = useState(\"\");\r\n  const [selected, setSelected] = useState(\"\");\r\n  const [selected1, setSelected1] = useState(\"\");\r\n  const [selected2, setSelected2] = useState(\"\");\r\n  const [selected3, setSelected3] = useState(\"\");\r\n\r\n  const Links_State = (links, nodes) => {\r\n    setLinksGlobal(links);\r\n    setNodesGlobal(nodes);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (linksGlobal !== null && nodesGlobal !== null) {\r\n      console.log(\"UseEffect called\");\r\n      console.log(linksGlobal);\r\n      //  filter_graph();\r\n    }\r\n  }, [linksGlobal, nodesGlobal]);\r\n\r\n  useEffect(() => {\r\n  //  const myScene = fgRef.current.scene();\r\n\r\n  // var bgTexture = new THREE.TextureLoader().load(background_image);\r\n//bgTexture.minFilter = THREE.LinearFilter;\r\n//myScene.background = bgTexture;\r\n//myScene.background.bgHeight = \"100%\";\r\n//console.log(myScene.background);\r\n\r\n// const centreCoordinates = { x: 250, y: 250 };\r\n// const backgroundImg = new Image();\r\n// backgroundImg.src =\r\n//   \"https://www.pixelstalk.net/wp-content/uploads/2016/04/Mountain-wallpaper-HD.jpeg\";\r\n// ctx.drawImage(\r\n//   backgroundImg,\r\n//   centreCoordinates.x - backgroundImg.width / 2,\r\n//   centreCoordinates.y - backgroundImg.height / 2\r\n// );\r\n  }, []);\r\n\r\n  const onRenderFramePre = (ctx, globalScale) => {\r\n    const centreCoordinates = { x: 250, y: 250 };\r\n    const backgroundImg = new Image();\r\n    backgroundImg.src =\r\n      \"https://www.pixelstalk.net/wp-content/uploads/2016/04/Mountain-wallpaper-HD.jpeg\";\r\n    ctx.drawImage(\r\n      backgroundImg,\r\n      centreCoordinates.x - backgroundImg.width / 2,\r\n      centreCoordinates.y - backgroundImg.height / 2\r\n    );\r\n  };\r\n  const filter_graph = (node) => {\r\n    //data.nodes=nodesGlobal;\r\n    for (let i = 0; i < nodesGlobal.length; i++) {\r\n      if (node.id === nodesGlobal[i].id) {\r\n        data.nodes = [];\r\n        data.nodes.push(node);\r\n        data.nodes.push(...node.neighbors);\r\n      }\r\n    }\r\n\r\n    data.links = linksGlobal;\r\n    let links_new = [];\r\n    // FOR CREATING LINK____________________\r\n    for (let i = 0; i < data.links.length; i++) {\r\n      if (node.id === data.links[i].target.id) {\r\n        console.log(data.links[i]);\r\n        links_new.push(data.links[i]);\r\n      }\r\n      if (node.id === data.links[i].source.id) {\r\n        console.log(data.links[i]);\r\n        links_new.push(data.links[i]);\r\n      }\r\n    }\r\n\r\n    data.links = [];\r\n    data.links.push(...links_new);\r\n\r\n    console.log(\"new data=>\", data);\r\n\r\n    // setGData(data || null);\r\n    setHoverNode(node || null);\r\n    const distance = 40;\r\n    const distRatio = 5 + distance / Math.hypot(node.x);\r\n\r\n    fgRef.current.cameraPosition(\r\n      { x: node.x * distRatio, y: node.y * distRatio, z: node.z * distRatio }, // new position\r\n      node, // lookAt ({ x, y, z })\r\n      2000 // ms transition duration\r\n    );\r\n  };\r\n\r\n  const filter_graph_by_status = (node_status) => {\r\n    //data.nodes=nodesGlobal;\r\n    data.nodes = [];\r\n    for (let i = 0; i < nodesGlobal.length; i++) {\r\n      if (\r\n        nodesGlobal[i].hasOwnProperty(\"Name\") &&\r\n        nodesGlobal[i].Name !== \"InsuranceGig\"\r\n      ) {\r\n        if (node_status === nodesGlobal[i].Status) {\r\n          data.nodes.push(nodesGlobal[i]);\r\n          data.nodes.push(...nodesGlobal[i].neighbors);\r\n        }\r\n      }\r\n    }\r\n    // setAfterFilter(data.nodes);\r\n    data.links = linksGlobal;\r\n    let links_new = [];\r\n    // FOR CREATING LINK____________________\r\n    for (let i = 0; i < data.nodes.length; i++) {\r\n      for (let j = 0; j < data.links.length; j++) {\r\n        // if (data.nodes[i].id === data.links[j].target.id) {\r\n        //   console.log(data.links[j]);\r\n        //   links_new.push(data.links[j]);\r\n        // }\r\n        if (data.nodes[i].id === data.links[j].source.id) {\r\n          console.log(data.links[j]);\r\n          links_new.push(data.links[j]);\r\n        }\r\n      }\r\n    }\r\n\r\n    data.links = [];\r\n    data.links.push(...links_new);\r\n\r\n    console.log(\"new data=>\", data);\r\n\r\n    // setGData(data || null);\r\n    setHoverNode(data.nodes || null);\r\n    const distance = 40;\r\n    const distRatio = 5 + distance / Math.hypot(data.nodes[0].x);\r\n\r\n    fgRef.current.cameraPosition(\r\n      {\r\n        x: data.nodes[0].x * distRatio,\r\n        y: data.nodes[0].y * distRatio,\r\n        z: data.nodes[0].z * distRatio,\r\n      }, // new position\r\n      data.nodes[0], // lookAt ({ x, y, z })\r\n      2000 // ms transition duration\r\n    );\r\n  };\r\n\r\n  const data = useMemo(() => {\r\n    let nodes = [],\r\n      links = [];\r\n\r\n    if (w_new) {\r\n      console.log(w_new);\r\n      nodes.push(...w_new.nodes);\r\n\r\n      nodes = nodes.map((obj, i) => ({\r\n        ...obj,\r\n        id: i,\r\n        neighbors: [],\r\n        links: [],\r\n      }));\r\n\r\n      for (let i = 0; i < nodes.length; i++) {\r\n        //For Center Node\r\n        if (nodes[i].hasOwnProperty(\"Name\") === true) {\r\n          if (nodes[i].Name === \"InsuranceGig\") {\r\n            for (let j = 1; j < w_new.nodes.length; j++) {\r\n              if (\r\n                nodes[j].hasOwnProperty(\"Name\") &&\r\n                nodes[j].Name !== \"InsuranceGig\"\r\n              ) {\r\n                nodes[i].neighbors.push(nodes[j]);\r\n                nodes[j].neighbors.push(nodes[i]);\r\n                let obj = {\r\n                  source: nodes[j].id,\r\n                  target: nodes[i].id,\r\n                };\r\n                // console.log(obj);\r\n                nodes[i].links.push(obj);\r\n                links.push(obj);\r\n              }\r\n            }\r\n          } else {\r\n            for (let j = 0; j < nodes.length; j++) {\r\n              if (\r\n                nodes[j].hasOwnProperty(\"Buyer\") ||\r\n                nodes[j].hasOwnProperty(\"Seller\")\r\n              ) {\r\n                for (\r\n                  let k = 0;\r\n                  k < nodes[j].WorkflowImplementation.length;\r\n                  k++\r\n                ) {\r\n                  if (\r\n                    nodes[i].Name === nodes[j].WorkflowImplementation[k].Name\r\n                  ) {\r\n                    nodes[i].neighbors.push(nodes[j]);\r\n                    nodes[j].neighbors.push(nodes[i]);\r\n                    let obj = {\r\n                      source: nodes[j].id,\r\n                      target: nodes[i].id,\r\n                    };\r\n                    // console.log(obj);\r\n                    nodes[i].links.push(obj);\r\n                    links.push(obj);\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      setStatus(false);\r\n      setLinksGlobal(links);\r\n      setNodesGlobal(nodes);\r\n      console.log(nodes);\r\n      console.log(links);\r\n\r\n      //const data = { nodes: nodes, links: links };\r\n\r\n      return { nodes: nodes, links: links };\r\n    }\r\n  }, [check]);\r\n\r\n  const updateHighlight = () => {\r\n    setHighlightNodes(highlightNodes);\r\n    setHighlightLinks(highlightLinks);\r\n  };\r\n\r\n  const handleNodeHover = (node) => {\r\n    highlightNodes.clear();\r\n    highlightLinks.clear();\r\n    if (node) {\r\n      highlightNodes.add(node);\r\n      node.neighbors.forEach((neighbor) => highlightNodes.add(neighbor));\r\n      node.links.forEach((link) => highlightLinks.add(link));\r\n    }\r\n\r\n    setHoverNode(node || null);\r\n    updateHighlight();\r\n  };\r\n\r\n  const handleNodeClick = (node) => {\r\n    showSidebar(false);\r\n    setsingleNodeData(node);\r\n    if (node.hasOwnProperty(\"Name\")) {\r\n      if (node.Name === \"InsuranceGig\") {\r\n        setWorkflow_type(\"InsuranceGig\");\r\n      } else {\r\n        setWorkflow_type(\"workflow\");\r\n      }\r\n    } else {\r\n      setWorkflow_type(\"buyer_seller\");\r\n    }\r\n\r\n    showSidebar(true);\r\n\r\n    console.log(\"jsngrpah\", node);\r\n\r\n    const distance = 40;\r\n    const distRatio = 5 + distance / Math.hypot(node.x);\r\n\r\n    fgRef.current.cameraPosition(\r\n      { x: node.x * distRatio, y: node.y * distRatio, z: node.z * distRatio }, // new position\r\n      node, // lookAt ({ x, y, z })\r\n      2000 // ms transition duration\r\n    );\r\n  };\r\n  const handleClick = (node) => {\r\n    setCheck((check) => check);\r\n    setFirstFilter(\"Workflow\");\r\n\r\n    setCheck((check) => check);\r\n    console.log({ workflow_type });\r\n\r\n    if (linksGlobal === null || nodesGlobal === null) {\r\n      Links_State(data.links, data.nodes);\r\n    }\r\n\r\n    if (linksGlobal !== null && nodesGlobal !== null) {\r\n      filter_graph(node);\r\n    }\r\n  };\r\n\r\n  const handleByStatus = (status) => {\r\n    setFirstFilter(\"Status\");\r\n    setCheck((check) => check);\r\n\r\n    if (linksGlobal === null || nodesGlobal === null) {\r\n      Links_State(data.links, data.nodes);\r\n    }\r\n\r\n    if (linksGlobal !== null && nodesGlobal !== null) {\r\n      filter_graph_by_status(status);\r\n    }\r\n  };\r\n\r\n  const handleLinkHover = (link) => {\r\n    highlightNodes.clear();\r\n    highlightLinks.clear();\r\n\r\n    if (link) {\r\n      highlightLinks.add(link);\r\n      highlightNodes.add(link.source);\r\n      highlightNodes.add(link.target);\r\n    }\r\n\r\n    updateHighlight();\r\n  };\r\n\r\n  const paintRing = useCallback(\r\n    (node, ctx) => {\r\n      // add ring just for highlighted nodes\r\n      ctx.beginPath();\r\n      ctx.arc(node.x, node.y, NODE_R * 1.4, 0, 2 * Math.PI, false);\r\n      ctx.fillStyle = node === hoverNode ? \"red\" : \"red\";\r\n      ctx.fill();\r\n    },\r\n    [hoverNode]\r\n  );\r\n\r\n  const GROUPS = 12;\r\n\r\n  return (\r\n    <>\r\n      <div style={rootDiv.rowWrapper}>\r\n        <div className=\"leftbar\" style={indexs.leftbar}>\r\n          <div style={leftbar.mainDiv}>\r\n            <h2 style={leftbar.heading}>Filters</h2>\r\n            <div style={leftbar.slctDiv}>\r\n              <select\r\n                style={leftbar.slct}\r\n                value={selected}\r\n                // onChange={(e) => setSelected(e.target.value)}\r\n                onChange={(e) => {\r\n                  setSelected(e.target.value);\r\n                  if (parseInt(e.target.value) === parseInt(100)) {\r\n                    setCheck((check) => !check);\r\n                    // window.location.reload(false);\r\n                  } else {\r\n                    if (nodesGlobal !== null) {\r\n                      for (let i = 0; i < nodesGlobal.length; i++) {\r\n                        if (\r\n                          parseInt(e.target.value) ===\r\n                          parseInt(nodesGlobal[i].id)\r\n                        ) {\r\n                          console.log(\"data to be set==>\", data);\r\n\r\n                          handleClick(nodesGlobal[i]);\r\n                        }\r\n                      }\r\n                    } else {\r\n                      for (let i = 0; i < data.nodes.length; i++) {\r\n                        if (\r\n                          parseInt(e.target.value) ===\r\n                          parseInt(data.nodes[i].id)\r\n                        ) {\r\n                          console.log(\"data to be set==>\", data);\r\n\r\n                          handleClick(data.nodes[i]);\r\n                        }\r\n                      }\r\n                    }\r\n                  }\r\n                }}\r\n              >\r\n                <option>Choose a Workflow</option>\r\n                {/* <option value=\"100\">RESET</option> */}\r\n                {nodesGlobal !== null\r\n                  ? nodesGlobal.map((data) =>\r\n                      data.hasOwnProperty(\"Workflow\") &&\r\n                      data.Name !== \"InsuranceGig\" ? (\r\n                        <>\r\n                          <option key={data.id} value={data.id}>\r\n                            {data.Name}\r\n                          </option>\r\n                        </>\r\n                      ) : (\r\n                        <></>\r\n                      )\r\n                    )\r\n                  : data.nodes.map((data) =>\r\n                      data.hasOwnProperty(\"Workflow\") &&\r\n                      data.Name !== \"InsuranceGig\" ? (\r\n                        <>\r\n                          <option key={data.id} value={data.id}>\r\n                            {data.Name}\r\n                          </option>\r\n                        </>\r\n                      ) : (\r\n                        <></>\r\n                      )\r\n                    )}\r\n              </select>\r\n              <br />\r\n              <br />\r\n\r\n              <select\r\n                value={selected3}\r\n                // onChange={(e) => setSelected3(e.target.value)}\r\n                style={leftbar.slct}\r\n                onChange={(e) => {\r\n                  setSelected3(e.target.value);\r\n                  if (parseInt(e.target.value) === parseInt(100)) {\r\n                    setCheck((check) => !check);\r\n                    // window.location.reload(false);\r\n                  } else {\r\n                    if (nodesGlobal !== null) {\r\n                      for (let i = 0; i < nodesGlobal.length; i++) {\r\n                        if (\r\n                          parseInt(e.target.value) ===\r\n                          parseInt(nodesGlobal[i].id)\r\n                        ) {\r\n                          console.log(\"data to be set==>\", data);\r\n\r\n                          handleClick(nodesGlobal[i]);\r\n                        }\r\n                      }\r\n                    } else {\r\n                      for (let i = 0; i < data.nodes.length; i++) {\r\n                        if (\r\n                          parseInt(e.target.value) ===\r\n                          parseInt(data.nodes[i].id)\r\n                        ) {\r\n                          console.log(\"data to be set==>\", data);\r\n\r\n                          handleClick(data.nodes[i]);\r\n                        }\r\n                      }\r\n                    }\r\n                  }\r\n                }}\r\n              >\r\n                <option>Choose Buyer</option>\r\n                {/* <option value=\"100\">RESET</option> */}\r\n                {nodesGlobal &&\r\n                  nodesGlobal.map((data) =>\r\n                    data.hasOwnProperty(\"Buyer\") ? (\r\n                      <>\r\n                        <option key={data.id} value={data.id}>\r\n                          {data.Buyer}\r\n                        </option>\r\n                      </>\r\n                    ) : (\r\n                      <></>\r\n                    )\r\n                  )}\r\n              </select>\r\n              <br />\r\n              <br />\r\n\r\n              <select\r\n                value={selected2}\r\n                //  onChange={(e) => setSelected2(e.target.value)}\r\n                style={leftbar.slct}\r\n                onChange={(e) => {\r\n                  setSelected2(e.target.value);\r\n                  if (parseInt(e.target.value) === parseInt(100)) {\r\n                    setCheck((check) => !check);\r\n                    //window.location.reload(false);\r\n                  } else\r\n                    for (let i = 0; i < data.nodes.length; i++) {\r\n                      if (\r\n                        parseInt(e.target.value) === parseInt(data.nodes[i].id)\r\n                      ) {\r\n                        handleClick(data.nodes[i]);\r\n                      }\r\n                    }\r\n                }}\r\n              >\r\n                <option>Choose Seller</option>\r\n                {/* <option value=\"100\">RESET</option> */}\r\n                {nodesGlobal &&\r\n                  nodesGlobal.map((data) =>\r\n                    data.hasOwnProperty(\"Seller\") ? (\r\n                      <>\r\n                        <option key={data.id} value={data.id}>\r\n                          {data.Seller}\r\n                        </option>\r\n                      </>\r\n                    ) : (\r\n                      <></>\r\n                    )\r\n                  )}\r\n              </select>\r\n              <br />\r\n              <br />\r\n              <select\r\n                style={leftbar.slct}\r\n                value={selected1}\r\n                // onChange={(e) => setSelected1(e.target.value)}\r\n                onChange={(e) => {\r\n                  setSelected1(e.target.value);\r\n                  console.log(e.target.value);\r\n                  if (parseInt(e.target.value) === parseInt(100)) {\r\n                    setCheck((check) => !check);\r\n                    // window.location.reload(false);\r\n                  } else if (e.target.value === \"Choose Status\") {\r\n                    return;\r\n                  } else {\r\n                    handleByStatus(e.target.value);\r\n                  }\r\n                }}\r\n              >\r\n                <option value={null}>Choose Status</option>\r\n                {/* <option value=\"100\" key=\"100\">\r\n                  RESET\r\n                </option> */}\r\n                <option value=\"Live\" key=\"Live\">\r\n                  Live\r\n                </option>\r\n                <option value=\"Introduced\" key=\"Introduced\">\r\n                  Introduced\r\n                </option>\r\n                <option value=\"Testing\" key=\"Testing\">\r\n                  Testing\r\n                </option>\r\n              </select>\r\n              <br />\r\n              <br />\r\n              \r\n              <button\r\n                style={leftbar.btn}\r\n                onClick={() => {\r\n                  setCheck((check) => !check);\r\n                  setSelected(\"\");\r\n                  setSelected1(\"\");\r\n                  setSelected2(\"\");\r\n                  setSelected3(\"\");\r\n                }}\r\n              >\r\n                Reset\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"middlebar\" style={indexs.middlebar}>\r\n          <TopBar />\r\n          <ForceGraph3D\r\n            className=\"react-graph\"\r\n            nodeColor={node => node.hasOwnProperty(\"Name\")&&node.Name!==\"InsuranceGig\" \r\n            ? \"red\" \r\n            : \r\n            node.hasOwnProperty(\"Name\")&&node.Name===\"InsuranceGig\" ? \r\n            \"Violet\" \r\n            :  node.hasOwnProperty(\"Buyer\") ?\"yellow\":\"skyblue\" }\r\n            // nodeColor={(node) => generateName(node)}\r\n            ref={fgRef}\r\n            graphData={data}\r\n            // linkColor={() => \"White\"}\r\n           // nodeAutoColorBy={(d) => }\r\n            //  linkAutoColorBy={() => \"white\"}\r\n            linkOpacity={0.6}\r\n             linkAutoColorBy={(d) => data.nodes[d.source].id % GROUPS}\r\n            linkWidth={0.6}\r\n            //distRatio=\"10:4\"\r\n            // nodeAutoColorBy=\"group\"\r\n            // nodeRelSize={NODE_R}\r\n            autoPauseRedraw={false}\r\n            // linkWidth={(link) => (highlightLinks.has(link) ? 4 : 2)}\r\n            linkDirectionalParticles={4}\r\n            linkDirectionalParticleWidth={(link) =>\r\n              highlightLinks.has(link) ? 1 : 0\r\n            }\r\n            nodeLabel={(node) => {\r\n              if (node.hasOwnProperty(\"Workflow\")) {\r\n                if (node.Name === \"InsuranceGig\") {\r\n                  return `_________INSURANCE GIG________ <br/>\r\n\r\n${node.neighbors.map((n) => {\r\n  return `<br/>Worflow :\r\n ${n.Name}`;\r\n})} \r\n`;\r\n                }\r\n\r\n\r\n                return `Workflow : ${node.Name} \r\n<br/>\r\nStatus : ${node.Status}\r\n${\r\n  node.neighbors.map((n) => {\r\n  return n.hasOwnProperty(\"Seller\")\r\n    ?  `<br/>Seller : ${n.Seller}` :``\r\n  \r\n})\r\n} \r\n${\r\n  node.neighbors.map((n) => {\r\n  return n.hasOwnProperty(\"Buyer\")\r\n    ? `<br/>Buyer :\r\n ${n.Buyer}` : ``\r\n  \r\n})\r\n} \r\n\r\n\r\n\r\n\r\n`;\r\n              } else if (node.hasOwnProperty(\"Buyer\")) {\r\n                return `<br/>This is ${\r\n                  node.Buyer\r\n                } , <br/> ${node.WorkflowImplementation.map((n) => {\r\n                  return `Buyer of ${n.Name} and status is ${n.Status} <br/>`;\r\n                })}`;\r\n              } else if (node.hasOwnProperty(\"Seller\")) {\r\n                return `<br/>This is ${\r\n                  node.Seller\r\n                } , <br/> ${node.WorkflowImplementation.map((n) => {\r\n                  return `Seller of ${n.Name} and status is ${n.Status} <br/>`;\r\n                })}`;\r\n              }\r\n            }}\r\n            //nodeLabel ={node  => `<span>${node.id}</span>`}\r\n           // nodeCanvasObject={paintRing}\r\n            nodeCanvasObjectMode={(node) =>\r\n              highlightNodes.has(node) ? \"before\" : undefined\r\n            }\r\n            onNodeHover={handleNodeHover}\r\n            onLinkHover={handleLinkHover}\r\n            // linkOpacity={(node) => {\r\n            //   if (node.hasOwnProperty(\"Name\") && node.Name === \"InsuranceGig\") {\r\n            //     return 0;\r\n            //   } else {\r\n            //     return 0;\r\n            //   }\r\n            // }}\r\n\r\n            nodeVal={(node) => {\r\n              if (node.id < 6) {\r\n                if (node.hasOwnProperty(\"Name\")) {\r\n                  if (node.Name === \"InsuranceGig\") {\r\n                    return 30;\r\n                  } else return 5;\r\n                }\r\n              } else {\r\n                return 0.5;\r\n              }\r\n            }}\r\n            linkDirectionalArrowLength={5.5}\r\n            // linkDirectionalArrowRelPos={1}\r\n            //  linkDirectionalParticles={5}\r\n            // linkDirectionalParticleWidth={2}\r\n            linkDirectionalParticleSpeed={(d) => 20 * 0.001}\r\n            linkDirectionalParticleColor=\"red\"\r\n            // nodeThreeObject={(node) => {\r\n            //   if (node.hasOwnProperty(\"Name\") && node.Name === \"InsuranceGig\") {\r\n            //     const imgTexture = new THREE.TextureLoader().load(logo);\r\n            //     const material = new THREE.SpriteMaterial({ map: imgTexture });\r\n            //     const sprite = new THREE.Sprite(material);\r\n            //     sprite.scale.set(30, 30);\r\n\r\n            //     return sprite;\r\n            //   }\r\n            // }}\r\n            onNodeClick={handleNodeClick}\r\n          />\r\n\r\n          {!data.nodes.length && (\r\n            <h2\r\n              style={{\r\n                position: \"absolute\",\r\n                top: \"50%\",\r\n                left: \"40%\",\r\n                color: \"white\",\r\n              }}\r\n            >\r\n              No Result Found ! Please Reset\r\n            </h2>\r\n          )}\r\n        </div>\r\n      </div>\r\n      {show_sidebar && <SideBar node={singleNodeData} type={workflow_type} />}\r\n    </>\r\n\r\n    //</>//<ForceGraph3d\r\n    // ref={fgRef}\r\n    //       graphData={nodes_data}\r\n    //      // nodeAutoColorBy=\"group\"\r\n    //      className=\"graph\"\r\n    //      backgroundColor={\"rgba(0, 0, 0, 1)\"}\r\n    //       nodeColor={() => \"red\"}\r\n    //       linkColor={() => \"white\"}\r\n    //       nodeThreeObject={node => {\r\n    //         const sprite = new SpriteText(node.id);\r\n    //         sprite.color = node.color || \"red\";\r\n    //         sprite.textHeight = 8;\r\n    //         return sprite;\r\n    //       }}\r\n    //       onNodeClick={handleClick}\r\n    //     />\r\n  );\r\n}\r\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport ForceGraph3D from \"react-force-graph-3d\";\nimport App from \"./App\";\nimport NameGraph1 from \"./NameGraph1\";\nimport NameGraph from \"./NameGraph\";\nimport CustomGraph from \"./CustomGraph\";\nimport CustomJsonGraph from \"./CustomJsonGraph\";\nconst rootElement = document.getElementById(\"root\");\nimport leftBar from \"./leftBar\";\nimport LeftBar from \"./leftBar\";\nimport TopBar from \"./topBar\";\nimport SideBar from \"./sideBar\";\n\nReactDOM.render(\n  <StrictMode>\n    <CustomJsonGraph />\n  </StrictMode>,\n  rootElement\n);\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 78;"],"sourceRoot":""}